#!/usr/bin/env node

var docopt = require('docopt').docopt,
    async = require('async'),
    atmoClientFactory = require('../lib/atmosphere_client'),
    hyperflowClientFactory = require('../lib/hyperflow_client'),
    utils = require('../lib/utils.js'),
    configHelper = require('../lib/hflowc.config.js');

var doc = '\
Usage:\n\
    hflowc setup [-p <proxy_location>] [-c <config_location>] [-w <worker_count>]\n\
    hflowc runwf <hf_location> <workflow.json> [-c <config_location>]\n\
    hflowc teardown [-p <proxy_location>] [-c <config_location>]\n\
    \n\
Options:\n\
    -p <proxy_location> --proxy=<proxy_location>  Location of proxy, defaults to env[X509_USER_PROXY]\n\
    -c <config_location> --config=<config_location> Location of custom config file\
    -w <worker_count> --workers=<worker_count> Number of worker vms to be used in workflow\
    \n\
';

var opts = docopt(doc);


//config stuff
var config = configHelper.default_config;
var configLocations = configHelper.configLocations;

if (opts['--config']) {
    configLocations.push(opts['--config']);
}

utils.loadConfigs(configLocations, function (localConfigs) {
    localConfigs.forEach(function (localConfig) {
        for (var attr in localConfig) {
            if (localConfig.hasOwnProperty(attr)) {
                config[attr] = localConfig[attr];
            }
        }
    });

    if (opts['--proxy']) {
        config.proxyLocation = opts['--proxy'];
    }

    //configs ready, choose operation
    chooseCommand(opts, config);
});


function chooseCommand(opts, config) {
    if (opts.setup) {

        utils.readFile(config.proxyLocation, function (err, proxy) {
            if (err) {
                console.log('Error reading proxy! forgot to do a voms-proxy-init?', err);
                return;
            }

            var atmoClient = atmoClientFactory.createClient(config.atmoLocation, proxy);
            var basedProxy = new Buffer(proxy).toString('base64');
            var workerCount = opts['--workers'] ? opts['--workers'] : 1;
            var applianceSetId;

            atmoClient.newApplianceSet(config.wfApplianceSetName, null, function (err, applianceSet) {
                if (err) {
                    console.log('Error creating appliance set!', err);
                    return;
                }
                console.log('Appliance set id: ' + applianceSet.id + ' created successfully!');
                applianceSetId = applianceSet.id;


                function waitForVirtualMachine(vmId, cb) {
                    atmoClient.getVirtualMachine(vmId, function (err, virtualMachine) {
                        if (err) {
                            console.log('Error getting vm!', err);
                            cb(err);
                            return;
                        }
                        if (virtualMachine.state == 'active') {
                            console.log('vm active!');
                            cb(null, virtualMachine);
                            return;
                        }
                        console.log('vm inactive...');
                        setTimeout(function () {
                            waitForVirtualMachine(vmId, cb)
                        }, 2000);
                    });
                }

                atmoClient.newAppliance(
                    {
                        setId: applianceSetId,
                        name: 'wfmain',
                        templateId: config.wfMainId,
                        params: {
                            proxy: basedProxy
                        }
                    }, function (err, appliance) {
                        if (err) {
                            console.log('Error creating appliance!', err);
                            return;
                        }
                        console.log('WfMain created successfully!');

                        var vmId = appliance.virtual_machine_ids[0];
                        atmoClient.getVirtualMachine(vmId, function (err, virtualMachine) {
                            if (err) {
                                console.log('Error getting vm!', err);
                                return;
                            }
                            waitForVirtualMachine(vmId, function (err, virtualMachine) {
                                if (err) {
                                    console.log('Error waiting for vm!', err);
                                    return;
                                }

                                //get hf location
                                atmoClient.getPortMappings(function (err, portMappings) {
                                    var hfIp,
                                        hfPort,
                                        portMappingTemplateId;
                                    if (err) {
                                        console.log('Error getting port mappings!', err);
                                        return;
                                    }
                                    portMappings.forEach(function (portMapping) {
                                        if (portMapping.virtual_machine_id == vmId) {
                                            //found our vm!
                                            hfIp = portMapping.public_ip;
                                            hfPort = portMapping.source_port;
                                            portMappingTemplateId = portMapping.port_mapping_template_id;
                                            atmoClient.getPortMappingTemplate(portMappingTemplateId, function (err, portMappingTemplate) {
                                                if (err) {
                                                    console.log('Error getting port mapping template!', err);
                                                    return;
                                                }
                                                var targetPort = portMappingTemplate.target_port;
                                                if (targetPort == 443) {
                                                    console.log('Found port mapping ' + hfPort + '->' + targetPort + ', hfmain endoint: http://' + hfIp + ':' + hfPort);
                                                }
                                            });
                                        }
                                    });
                                });

                                var internalIp = virtualMachine.ip;
                                var rabbitUrl = 'amqp://' + virtualMachine.ip;

                                //start a worker
                                //asyns.times(workerCount, )
                                atmoClient.newAppliance(
                                    {
                                        setId: applianceSetId,
                                        name: 'wfworker',
                                        templateId: config.wfWorkerId,
                                        params: {
                                            rabbitmq_location: rabbitUrl,
                                            proxy: basedProxy
                                        }
                                    }, function (err, appliance) {
                                        if (err) {
                                            console.log('Error creating workers!', err);
                                            return;
                                        }
                                        console.log('starting workers...');
                                    }
                                )
                            });
                        });
                    }
                );
            });
        });
    } else if (opts.runwf) {
        var hyperFlowClient = hyperflowClientFactory.createClient(opts['<hf_location>']);

        utils.readFile(opts['<workflow.json>'], function (err, workflow) {
            if (err) {
                console.log('Error reading wf:', err);
                return;
            }

            hyperFlowClient.runWorkflow(workflow, function (err, workflowLocation) {
                if (err) {
                    console.log('Error running wf:', err);
                    return;
                }
                console.log('workflow started: ', opts['<hf_location>'] + workflowLocation);
            });
        });

    } else if (opts.teardown) {
    }
}